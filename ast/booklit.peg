{
  package ast

  import "strings"

  func ifaceStr(val interface{}) string {
    str := ""
    for _, seg := range val.([]interface{}) {
      str = str + string(seg.([]byte))
    }

    return str
  }

  func ifaceSequences(val interface{}) []Sequence {
    sentences := []Sequence{}
    for _, node := range val.([]interface{}) {
      sentences = append(sentences, node.(Sequence))
    }

    return sentences
  }

  func ifaceNodes(val interface{}) []Node {
    nodes := []Node{}
    for _, node := range val.([]interface{}) {
      nodes = append(nodes, node.(Node))
    }

    return nodes
  }
}

Booklit <- node:Paragraphs !. {
  return node, nil
}

Paragraphs <- CommentSpacing* paragraphs:(p:Paragraph CommentSpacing* { return p, nil })+ {
  return Sequence(ifaceNodes(paragraphs)), nil
}

CommentSpacing <- "\n" / Comment

Paragraph <- sentences:(s:Sentence "\n" { return s, nil })+ {
  return Paragraph(ifaceSequences(sentences)), nil
}

Sentence <- [ \t]* words:(Word)+ {
  return Sequence(ifaceNodes(words)), nil
}

Word <- Comment? val:(String / Invoke / Comment / Interspersed) Comment? {
  return val, nil
}

Comment <- [ \t]* "{-" (Comment / !"-}" .)* "-}"

Interspersed <- '{' word:Word '}' {
  return word, nil
}

SplitSentence <- [ \t]* firstWord:Word words:(Word / Split)* {
  allWords := append([]interface{}{firstWord}, words.([]interface{})...)
  return Sequence(ifaceNodes(allWords)), nil
}

Split <- "\n" [ \t]* { return String(" "), nil }

String <- str:[^\\{}\n]+ { return String(c.text), nil } / '\\' [\\{}] { return String(c.text[1:]), nil }

VerbatimString <- str:[^\n}]+ {
  return String(c.text), nil
} / '}' !"}}" {
  return String(c.text), nil
}

PreformattedSentence <- indent:Indent words:(String / Invoke)* '\n' {
  line := []Node{String(indent.(string))}
  line = append(line, ifaceNodes(words)...)
  return Sequence(line), nil
}

Preformatted <- '\n' sentences:PreformattedSentence* {
  delete(c.globalStore, "indent-skip")
  return Preformatted(ifaceSequences(sentences)), nil
}

VerbatimSentence <- indent:Indent words:VerbatimString* '\n' {
  line := []Node{String(indent.(string))}
  line = append(line, ifaceNodes(words)...)
  return Sequence(line), nil
}

Verbatim <- '\n' sentences:VerbatimSentence* {
  delete(c.globalStore, "indent-skip")
  return Preformatted(ifaceSequences(sentences)), nil
}

Invoke <- '\\' name:([a-z-]+) args:(Argument*) {
  return Invoke{
    Function: ifaceStr(name),
    Arguments: ifaceNodes(args),
  }, nil
}

VerbatimArg <- "{{{" node:Verbatim [ \t]* "}}}" {
  return node, nil
}

PreformattedArg <- "{{" node:Preformatted [ \t]* "}}" {
  return node, nil
}

Arg <- '{' node:(SplitSentence / Paragraphs) [ \t]* '}' {
  return node, nil
}

Argument <- VerbatimArg / PreformattedArg / Arg

Indent <- [ \t]* {
  skip := len(c.text)

  i, found := c.globalStore["indent-skip"]
  if found {
    skip = i.(int)
  } else {
    c.globalStore["indent-skip"] = skip
  }

  if skip <= len(c.text) {
    return string(c.text[skip:]), nil
  } else {
    return "", nil
  }
}
