// Code generated by go-bindata.
// sources:
// render/html/paragraph.html
// render/html/reference.html
// render/html/section.html
// render/html/sequence.html
// render/html/string.html
// render/html/toc.html
// DO NOT EDIT!

package render

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _renderHtmlParagraphHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\xb0\xab\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xcc\x4b\x49\xad\xd0\x51\x50\x29\x4e\xcd\x2b\x49\xcd\x4b\x4e\x55\xb0\xb2\x55\xd0\xab\xad\xad\xae\xce\x4c\x83\x4a\xd6\xd6\x2a\x54\x57\xa7\xe6\xa5\x80\x04\x11\xca\x6a\x14\x8a\x52\xf3\x52\x52\x8b\x40\xa2\x60\x49\x1b\xfd\x02\x3b\x2e\x40\x00\x00\x00\xff\xff\xd3\x3e\x01\x8c\x5a\x00\x00\x00")

func renderHtmlParagraphHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlParagraphHtml,
		"render/html/paragraph.html",
	)
}

func renderHtmlParagraphHtml() (*asset, error) {
	bytes, err := renderHtmlParagraphHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/paragraph.html", size: 90, mode: os.FileMode(420), modTime: time.Unix(1498953201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renderHtmlReferenceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x54\xc8\x28\x4a\x4d\xb3\x55\xaa\xae\xd6\x0b\x49\x4c\x57\xa8\x51\x28\x2d\xca\xa9\xad\x55\xb2\xab\xae\xd6\x73\xc9\x2c\x2e\xc8\x49\xac\x54\xa8\x51\x28\x4a\xcd\x4b\x49\x2d\xaa\xad\xb5\xd1\x4f\xb4\xe3\x02\x04\x00\x00\xff\xff\x85\xfd\x53\x5c\x33\x00\x00\x00")

func renderHtmlReferenceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlReferenceHtml,
		"render/html/reference.html",
	)
}

func renderHtmlReferenceHtml() (*asset, error) {
	bytes, err := renderHtmlReferenceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/reference.html", size: 51, mode: os.FileMode(420), modTime: time.Unix(1498873062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renderHtmlSectionHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x41\xaa\x02\x31\x0c\x06\xe0\x7d\x4f\x11\xe6\x00\x79\x17\x18\xde\x42\x5d\x8b\x30\x5e\xa0\xda\x8c\x2d\x74\x32\xa5\x13\x17\x12\x73\x77\x69\x45\x70\xe1\x2a\xf0\x25\x7f\x92\x31\xaa\x46\xf2\x81\xea\x81\x8a\x44\x40\xb3\x7f\xd5\x34\x03\x9e\x7c\x25\x16\x33\x55\x3c\xde\x97\x0b\x55\x33\x50\x25\x0e\x9d\xce\x49\x32\xc1\x13\x2a\x71\x68\xad\xf1\xef\xc7\x22\xe7\x54\x71\xb7\x86\xc7\xd7\x60\xb3\x34\x03\xaf\x02\x38\x95\x9c\x64\xa2\xab\xa4\x95\x37\x33\x07\xa0\x5a\x3d\xdf\x08\x70\x1f\x53\x0e\x95\xb8\x6b\x73\xa1\xa5\x64\x2f\x04\xc3\xf6\x0e\x60\x94\x25\x0f\xed\x4e\xcf\xf5\xc7\xdc\xa7\xbe\x02\x00\x00\xff\xff\x9b\x17\xcb\x1e\xd7\x00\x00\x00")

func renderHtmlSectionHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlSectionHtml,
		"render/html/section.html",
	)
}

func renderHtmlSectionHtml() (*asset, error) {
	bytes, err := renderHtmlSectionHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/section.html", size: 215, mode: os.FileMode(420), modTime: time.Unix(1498952778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renderHtmlSequenceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\xd0\x73\xce\xcf\x2b\x49\xcd\x2b\x29\xae\xad\xad\xae\xd6\x53\xa8\x51\x28\x4a\xcd\x4b\x49\x2d\x02\xf1\x52\xf3\x52\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\xbe\x50\x06\x29\x00\x00\x00")

func renderHtmlSequenceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlSequenceHtml,
		"render/html/sequence.html",
	)
}

func renderHtmlSequenceHtml() (*asset, error) {
	bytes, err := renderHtmlSequenceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/sequence.html", size: 41, mode: os.FileMode(420), modTime: time.Unix(1498830402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renderHtmlStringHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x0b\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc7\x02\x8e\x75\x0e\x00\x00\x00")

func renderHtmlStringHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlStringHtml,
		"render/html/string.html",
	)
}

func renderHtmlStringHtml() (*asset, error) {
	bytes, err := renderHtmlStringHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/string.html", size: 14, mode: os.FileMode(420), modTime: time.Unix(1498870948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renderHtmlTocHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xe2\x2b\x07\x48\x2e\x10\xb2\xb0\x23\x86\x5e\x20\x50\xb7\x8d\xe4\x04\x64\xa5\x48\xc8\xcd\xdd\x51\x0b\x1d\x98\x6c\x3d\x59\x7e\x4f\x35\x8d\xb0\xe7\x39\xf1\x20\x54\x5a\xeb\x7c\x89\xaf\xd0\x01\x7e\xe1\x6d\xa8\x4a\x2c\x13\xfd\x9d\x00\x80\xe7\x14\xf6\x05\xf0\x11\xb3\xd0\x78\x32\xaa\xf6\x2a\x29\x47\x79\xf7\x71\xc2\x8a\x45\xb8\x35\x13\x54\xed\x65\xc9\x37\x92\xd6\xa0\x6a\xfb\x54\x99\xb0\x42\xa8\x0c\x1b\xf3\x2e\x86\xee\xf7\x4a\xb5\x52\x7e\x72\xac\x04\x53\x1f\x77\x3b\xd7\xcc\x06\xf6\x70\xba\xaf\x54\x95\xca\xb0\x33\xef\xb6\x4a\xef\xf6\xe6\x03\x7f\x02\x00\x00\xff\xff\x5c\x93\x6d\x12\xd3\x00\x00\x00")

func renderHtmlTocHtmlBytes() ([]byte, error) {
	return bindataRead(
		_renderHtmlTocHtml,
		"render/html/toc.html",
	)
}

func renderHtmlTocHtml() (*asset, error) {
	bytes, err := renderHtmlTocHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "render/html/toc.html", size: 211, mode: os.FileMode(420), modTime: time.Unix(1499007373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"render/html/paragraph.html": renderHtmlParagraphHtml,
	"render/html/reference.html": renderHtmlReferenceHtml,
	"render/html/section.html": renderHtmlSectionHtml,
	"render/html/sequence.html": renderHtmlSequenceHtml,
	"render/html/string.html": renderHtmlStringHtml,
	"render/html/toc.html": renderHtmlTocHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"render": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"paragraph.html": &bintree{renderHtmlParagraphHtml, map[string]*bintree{}},
			"reference.html": &bintree{renderHtmlReferenceHtml, map[string]*bintree{}},
			"section.html": &bintree{renderHtmlSectionHtml, map[string]*bintree{}},
			"sequence.html": &bintree{renderHtmlSequenceHtml, map[string]*bintree{}},
			"string.html": &bintree{renderHtmlStringHtml, map[string]*bintree{}},
			"toc.html": &bintree{renderHtmlTocHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

